// src/components/QuizPage.jsx
import React, { useEffect, useState, useCallback } from "react";
import quizData from "../data/quiz.json";
import { collection, addDoc } from "firebase/firestore";
import { db } from "../firebaseConfig";
/*
1. currentIndex: ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i
2. selected: ch·ªâ s·ªë ƒë√°p √°n m√† player ƒë√£ ch·ªçn (ch∆∞a ch·ªçn = null)
3. score: ƒëi·ªÉm c·ªßa player
4. showResult: cho bi·∫øt k·∫øt qu·∫£
5. timeLeft: th·ªùi gian ƒë·∫øm ng∆∞·ª£c
*/
const QuizPage = ({
  playerName,
  onViewLeaderboard,
  showResultPage,
  setShowResultPage,
  setLastScore,
  lastScore,
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [selected, setSelected] = useState(null);
  const [score, setScore] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [timeLeft, setTimeLeft] = useState(20);

  const currentQuestion = quizData[currentIndex];

  // S·ª≠ d·ª•ng useCallback ƒë·ªÉ ƒë·∫£m b·∫£o h√†m kh√¥ng b·ªã thay ƒë·ªïi gi·ªØa c√°c render
  // X·ª≠ l√Ω khi ch·ªçn ƒë√°p √°n ho·∫∑c h·∫øt gi·ªù
  const handleAnswer = useCallback(
    (optionIndex) => {
      setSelected(optionIndex); // L∆∞u ƒë√°p √°n ƒë√£ ch·ªçn

      // Ki·∫øm tra ƒë√∫ng hay sai
      const isCorrect = optionIndex === currentQuestion.answer;
      if (isCorrect) setScore((prev) => prev + 1);
      // Th·ªùi gian ch·ªù sau khi ch·ªçn ƒë√°p √°n
      setTimeout(() => {
        if (currentIndex + 1 < quizData.length) {
          setCurrentIndex((prev) => prev + 1);
          setSelected(null);
          setTimeLeft(20);
        } else {
          setShowResult(true);
          //setLastScore(score);
        }
      }, 1000);
    },
    [currentIndex, currentQuestion.answer]
  );

  // ƒê·∫øm ng∆∞·ª£c th·ªùi gian
  useEffect(() => {
    if (timeLeft > 0 && !selected) {
      const timer = setTimeout(() => setTimeLeft((prev) => prev - 1), 1000);
      return () => clearTimeout(timer);
    }

    if (timeLeft === 0 && !selected) {
      handleAnswer(null);
    }
  }, [timeLeft, selected, handleAnswer]);

  // L∆∞u ƒëi·ªÉm khi ho√†n th√†nh
  useEffect(() => {
    if (showResult && playerName) {
      setLastScore(score);
      const saveScore = async () => {
        await addDoc(collection(db, "leaderboard"), {
          name: playerName,
          score,
          time: new Date().toISOString(),
        });
      };
      saveScore();
    }
  }, [showResult, playerName, score, setLastScore]);
  // useEffect(() => {
  //   if (showResult && playerName) {
  //     const leaderboard = JSON.parse(localStorage.getItem("leaderboard")) || [];

  //     // C·∫≠p nh·∫≠t b·∫£ng x·∫øp h·∫°ng
  //     const updatedBoard = [
  //       ...leaderboard,
  //       { name: playerName, score, time: new Date().toLocaleString() },
  //     ];
  //     // B·∫£ng x·∫øp h·∫°ng 5 k·∫øt qu·∫£ g·∫ßn nh·∫•t
  //     const trimmedBoard = updatedBoard.slice(-5);
  //     localStorage.setItem("leaderboard", JSON.stringify(trimmedBoard));
  //   }
  // }, [showResult, playerName, score]);

  if (showResult || showResultPage) {
    return (
      <div className="quiz-container">
        <h2 className="question-title">üéâ Ho√†n th√†nh quiz!</h2>
        <p>
          ƒêi·ªÉm s·ªë c·ªßa b·∫°n, {playerName}:{" "}
          <strong>
            {lastScore}/{quizData.length}
          </strong>
        </p>

        <button
          className="option-button"
          onClick={onViewLeaderboard}
          style={{ marginTop: "20px" }}
        >
          üìà Xem b·∫£ng x·∫øp h·∫°ng to√†n qu·ªëc
        </button>
      </div>
    );
  }

  return (
    // Hi·ªÉn th·ªã c√¢u h·ªèi
    <div className="quiz-container">
      <h1 className="question-title">
        C√¢u {currentIndex + 1}/{quizData.length}
      </h1>
      <p>{currentQuestion.question}</p>
      {/*Hi·ªÉn th·ªã c√°c l·ª±a ch·ªçn*/}
      <div className="options-grid">
        {currentQuestion.options.map((option, index) => {
          let className = "option-button";
          if (selected !== null) {
            if (index === currentQuestion.answer) {
              className += " correct";
            } else if (index === selected) {
              className += " incorrect";
            }
          }

          // Hi·ªÉn th·ªã n√∫t ch·ªçn ƒë√°p √°n
          return (
            <button
              key={index}
              className={className}
              onClick={() => handleAnswer(index)}
              disabled={selected !== null}
            >
              {option}
            </button>
          );
        })}
      </div>
      <div className="timer">‚è≥ {timeLeft} gi√¢y</div>
    </div>
  );
};

export default QuizPage;